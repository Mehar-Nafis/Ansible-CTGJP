Lab 8: Working with ansible functions
Task 1: Loops with Ansible Playbook
vi looplab.yml
---
- hosts: all
  become: yes
  tasks:
   - name: creating users
     user:
       name: "{{ item }}"
       state: present
     with_items:
      - userX
      - userY
      - userZ
save the file using ESCAPE + :wq!

Execute the playbook

ansible-playbook looplab.yml
Verify if the users mentioned in the list were added by using an Ansible ad-hoc command

ansible all -a "tail -n 3 /etc/passwd"
Task 2: Tags with Ansible Playbooks
Create and edit tagslabs.yml in the same labs directory

vi tagslabs.yml
---
- hosts: all
  become: yes
  tasks:
    - name: Create a directory
      file:
        path: /tmp/demo_dir
        state: directory
        mode: '0755'
      tags:
        - create_dir

    - name: Create a file
      copy:
        content: "This is a demo file"
        dest: /tmp/demo_dir/demo_file.txt
      tags:
        - create_file

    - name: Ensure a package is installed (curl)
      yum:
        name: curl
        state: present
      tags:
        - install_curl

save the file using ESCAPE + :wq!

Execute the playbook

Notice that only the tasks associated with the mentioned tags are running

ansible-playbook -t "create_dir" tagslabs.yml
ansible-playbook -t "create_file" tagslabs.yml
ansible-playbook --skip-tags "install_curl" tagslabs.yml
Task 3: Prompts with Ansible Playbooks
Create and edit promptlab.yml in the same labs directory

vi promptlab.yml
---
- hosts: all
  become: yes
  user: ec2-user
  connection: ssh
  vars_prompt:
    - name: pkginstall
      prompt: Which package do you want to install?
      default: vim
      private: no
  tasks:
    - name: Install the package specified
      yum: pkg={{ pkginstall }} state=latest
save the file using ESCAPE + :wq!

Execute the playbook & you will be prompt for enter the package name which you want to install If no package is mentioned, vim is installed by default

ansible-playbook promptlab.yml
Verify if the specified package httpd is installed. SSH into one of the machines and verify using the command

ssh ec2-user@< managed_node_private_ip >
rpm -qa | grep httpd
ansible all -m "command" -a "rpm -qa | grep httpd"
Task 4: Until function
Create and edit untillab.yml in the same labs directory

vi untillab.yml
---
- hosts: all
  become: yes
  connection: ssh
  user: ec2-user
  tasks:
  - name: Install Apache Web Server
    yum:
       name: httpd
       state: latest
  - name: Verify Status of Service
    shell: systemctl status httpd
    register: result
    until: result.stdout.find("active (running)") != -1
    retries: 5
    delay: 10
save the file using "ESCAPE + :wq!"

Execute the playbook Notice the output of the command is shown along with the Ansible until command output

ansible-playbook untillab.yml
Login to the managed node from another window and start the httpd service You can use the same key (as used for CN) to login to managed node

ssh ec2-user@< managed_node_private_ip >
sudo service httpd start
you can check the status of httpd by

sudo service httpd status
Task 5: Run Once with Ansible Playbook
Create and edit rolab.yml in the same labs directory

vi rolab.yml
---
- hosts: all
  become: yes
  user: ec2-user
  connection: ssh
  gather_facts: no
  tasks:
    - name: Recording uptime 
      raw: /usr/bin/uptime >> /home/ec2-user/uptime
      run_once: true
save the file using ESCAPE + :wq!

Execute the playbook

ansible-playbook rolab.yml
Verify if the file exists and has the right contents on either of the client machines(manage nodes)

ansible all -a "cat /home/ec2-user/uptime"
now open the file and edit parameter as run_once: false Execute the playbook again

ansible-playbook rolab.yml
Verify if the file exists and has the right contents on the client machines(manage nodes)

ansible all -a "cat /home/ec2-user/uptime"
Task 6: Blocks with Ansible Playbook
Create and edit blklab.yml in the same labs directory Notice that the “web_package” variable is an invalid package. Due to the invalid package in a block, tasks under rescue will run

vi blklab.yml
---
- hosts: all
  become: yes
  user: ec2-user
  connection: ssh
  gather_facts: no
  tasks:
    - block:
        - name: Install {{ web_package }} package
          yum:
            name: "{{ web_package }}"
            state: latest
      rescue:
        - name: Install {{ db_package }} package
          yum:
            name: "{{ db_package }}"
            state: latest
      always:
        - name: Start {{ db_service }} service
          service:
            name: "{{ db_service }}"
            state: started
  vars:
    web_package: http
    db_package: mariadb-server
    db_service: mariadb
save the file using ESCAPE + :wq!

Execute the playbook Block tasks fail and that Rescue tasks are running due to the failure of block tasks. The Always tasks run independently

ansible-playbook blklab.yml
Now fix the package name in the Playbook (web_package: httpd) and run the Playbook again

ansible-playbook blklab.yml
Notice that the tasks under rescue are not running as block tasks ran successfully
